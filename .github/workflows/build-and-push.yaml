name: image-build-and-push

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - ".github/workflows/image-build-and-push.yaml"
      - "Dockerfile"
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}/sample

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      pull-requests: read
      id-token: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/metadata-action@v4
        id: meta
        with:
          # コンテナイメージの名前を指定する。
          # 以下の指定指定方法だと以下のようなイメージが作成される。
          # ghcr.io/username/repository-name/sample:tag
          images: ${{ env.IMAGE_NAME }}
          # デフォルトブランチの時だけ latest タグをつけてそれ以外は日時とコミットハッシュをつける
          # ref: https://github.com/docker/metadata-action?tab=readme-ov-file#customizing
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmmss' tz='Asia/Tokyo'}}-{{sha}}
          # Open Container Initiative (OCI) の Image Spec に基づくラベル
          # ref:
          # - https://github.com/opencontainers/image-spec/blob/fbb4662eb53b80bd38f7597406cf1211317768f0/annotations.md?plain=1#L18-L26
          labels: |
            org.opencontainers.image.authors="${{ github.repository_owner }}"
            org.opencontainers.image.url="https://github.com/${{ github.repository }}"
            org.opencontainers.image.documentation="https://github.com/${{ github.repository }}"
            org.opencontainers.image.source="https://github.com/${{ github.repository }}"
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          provenance: false
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:cache,mode=max
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
